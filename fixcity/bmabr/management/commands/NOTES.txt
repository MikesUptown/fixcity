XXX Error handling:

need a trivial factory API for getting errors:

 * adapt validation errors.
   (varies on: error, source type, app)

 * adapt server errors to a source-specific message
   (varies on: error code, source type, app)

 * adapt socket errors & other exceptions to a source-specific message
   (varies on: source type, app)

 maybe something like:

  error_adapter = ErrorAdapterFactory('twitter', 'fixcity') # meh.
  output = error_adapter.validation_errors(errors_dict)
  output = error_adapter.server_error(response_code, response_msg)
  output = error_adapter.exception(orig_exception)

 And maybe those should even be hidden by the Notifier's API? eg.
  notifier.on_server_error(...)
  notifier.on_user_error(...)
  notifier.on_success(...)

SERVER
=======

All you need is:

- a json view at a URL that we can hit to do something.

- it should return a json dict with app-specific info about the result.

- this dict should have an 'errors' key which is a dict of 'fieldname':
  'errormessage' pairs.

- response codes?


CLIENT LIBRARY
==============

Refactoring as per
https://projects.openplans.org/fixcity/ticket/159

General pattern, maybe a Template Method kind of thing:

* get ID of last processed input

* FETCH: get new data since last ID

* for each:
  - ADAPT data to json
  - SUBMIT json to create new rack:
    * create a source (seeclickfix only... should be done server-side)
  - FEEDBACK:
    on user error:
       - adapt errors to source-specific format
       - send msg
    on exception:
       - adapt errors to source-specific format
       - send msg
       - email admins
  - save ID as last processed item, unless server is down
    (or some other retryable failure)




